// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package google.firestore.v1;

import "google/api/field_behavior.proto";
import "google/api/annotations.proto";
import "google/firestore/v1/document.proto";
import "google/protobuf/wrappers.proto";

option csharp_namespace = "Google.Cloud.Firestore.V1";
option go_package = "google.golang.org/genproto/googleapis/firestore/v1;firestore";
option java_multiple_files = true;
option java_outer_classname = "QueryProto";
option java_package = "com.google.firestore.v1";
option objc_class_prefix = "GCFS";
option php_namespace = "Google\\Cloud\\Firestore\\V1";


// A Firestore query.
message StructuredQuery {
  // A selection of a collection, such as `messages as m1`.
  message CollectionSelector {
    // The collection ID.
    // When set, selects only collections with this ID.
    string collection_id = 2;

    // When false, selects only collections that are immediate children of
    // the `parent` specified in the containing `RunQueryRequest`.
    // When true, selects all descendant collections.
    bool all_descendants = 3;
  }

  // A filter.
  message Filter {
    // The type of filter.
    oneof filter_type {
      // A composite filter.
      CompositeFilter composite_filter = 1;

      // A filter on a document field.
      FieldFilter field_filter = 2;

      // A filter that takes exactly one argument.
      UnaryFilter unary_filter = 3;
    }
  }

  // A filter that merges multiple other filters using the given operator.
  message CompositeFilter {
    // A composite filter operator.
    enum Operator {
      // Unspecified. This value must not be used.
      OPERATOR_UNSPECIFIED = 0;

      // The results are required to satisfy each of the combined filters.
      AND = 1;
    }

    // The operator for combining multiple filters.
    Operator op = 1;

    // The list of filters to combine.
    // Must contain at least one filter.
    repeated Filter filters = 2;
  }

  // A filter on a specific field.
  message FieldFilter {
    // A field filter operator.
    enum Operator {
      // Unspecified. This value must not be used.
      OPERATOR_UNSPECIFIED = 0;

      // The given `field` is less than the given `value`.
      //
      // Requires:
      //
      // * That `field` come first in `order_by`.
      LESS_THAN = 1;

      // The given `field` is less than or equal to the given `value`.
      //
      // Requires:
      //
      // * That `field` come first in `order_by`.
      LESS_THAN_OR_EQUAL = 2;

      // The given `field` is greater than the given `value`.
      //
      // Requires:
      //
      // * That `field` come first in `order_by`.
      GREATER_THAN = 3;

      // The given `field` is greater than or equal to the given `value`.
      //
      // Requires:
      //
      // * That `field` come first in `order_by`.
      GREATER_THAN_OR_EQUAL = 4;

      // The given `field` is equal to the given `value`..
      EQUAL = 5;

      // The given `field` is not equal to the given `value`.
      //
      // Requires:
      //
      // * No other `NOT_EQUAL`, `NOT_IN`, `IS_NOT_NULL`, or `IS_NOT_NAN`.
      // * That `field` comes first in the `order_by`.
      NOT_EQUAL = 6;

      // The given `field` is an array that contains the given `value`.
      ARRAY_CONTAINS = 7;

      // The given `field` is equal to at least one value in the given array.
      //
      // Requires:
      //
      // * That `value` is a non-empty `ArrayValue` with at most 10 values.
      // * No other `IN` or `ARRAY_CONTAINS_ANY`. (-- or `NOT_IN` --)
      IN = 8;

      // The given `field` is an array that contains any of the values in the
      // given array.
      //
      // Requires:
      //
      // * That `value` is a non-empty `ArrayValue` with at most 10 values.
      // * No other `IN` or `ARRAY_CONTAINS_ANY`. (-- or `NOT_IN` --)
      ARRAY_CONTAINS_ANY = 9;

      // The value of the `field` is not in the given array.
      //
      // Requires:
      //
      // * That `value` is a non-empty `ArrayValue` with at most 10 values.
      // * No other `IN`, `ARRAY_CONTAINS_ANY`, `NOT_IN`, `NOT_EQUAL`,
      //   `IS_NOT_NULL`, or `IS_NOT_NAN`.
      // * That `field` comes first in the `order_by`.
      NOT_IN = 10;
    }

    // The field to filter by.
    FieldReference field = 1;

    // The operator to filter by.
    Operator op = 2;

    // The value to compare to.
    Value value = 3;
  }

  // A filter with a single operand.
  message UnaryFilter {
    // A unary operator.
    enum Operator {
     // Unspecified. This value must not be used.
     OPERATOR_UNSPECIFIED = 0;

     // The given `field` is equal to `NaN`.
     IS_NAN = 2;

     // The given `field` is equal to `NULL`.
     IS_NULL = 3;

     // The given `field` is not equal to `NaN`.
     //
     // Requires:
     //
     // * No other `NOT_EQUAL`, `NOT_IN`, `IS_NOT_NULL`, or `IS_NOT_NAN`.
     // * That `field` comes first in the `order_by`.
     IS_NOT_NAN = 4;

     // The given `field` is not equal to `NULL`.
     //
     // Requires:
     //
     // * A single `NOT_EQUAL`, `NOT_IN`, `IS_NOT_NULL`, or `IS_NOT_NAN`.
     // * That `field` comes first in the `order_by`.
     IS_NOT_NULL = 5;
    }

    // The unary operator to apply.
    Operator op = 1;

    // The argument to the filter.
    oneof operand_type {
      // The field to which to apply the operator.
      FieldReference field = 2;
    }
  }

  // An order on a field.
  message Order {
    // The field to order by.
    FieldReference field = 1;

    // The direction to order by. Defaults to `ASCENDING`.
    Direction direction = 2;
  }

  // A reference to a field, such as `max(messages.time) as max_time`.
  message FieldReference {
    string field_path = 2;
  }

  // The projection of document's fields to return.
  message Projection {
    // The fields to return.
    //
    // If empty, all fields are returned. To only return the name
    // of the document, use `['__name__']`.
    repeated FieldReference fields = 2;
  }

  // A sort direction.
  enum Direction {
    // Unspecified.
    DIRECTION_UNSPECIFIED = 0;

    // Ascending.
    ASCENDING = 1;

    // Descending.
    DESCENDING = 2;
  }

  // The projection to return.
  Projection select = 1;

  // The collections to query.
  repeated CollectionSelector from = 2;

  // The filter to apply.
  Filter where = 3;

  // The order to apply to the query results.
  //
  // Firestore guarantees a stable ordering through the following rules:
  //
  //  * Any field required to appear in `order_by`, that is not already
  //    specified in `order_by`, is appended to the order in field name order
  //    by default.
  //  * If an order on `__name__` is not specified, it is appended by default.
  //
  // Fields are appended with the same sort direction as the last order
  // specified, or 'ASCENDING' if no order was specified. For example:
  //
  //  * `SELECT * FROM Foo ORDER BY A` becomes
  //    `SELECT * FROM Foo ORDER BY A, __name__`
  //  * `SELECT * FROM Foo ORDER BY A DESC` becomes
  //    `SELECT * FROM Foo ORDER BY A DESC, __name__ DESC`
  //  * `SELECT * FROM Foo WHERE A > 1` becomes
  //    `SELECT * FROM Foo WHERE A > 1 ORDER BY A, __name__`
  repeated Order order_by = 4;

  // A starting point for the query results.
  Cursor start_at = 7;

  // A end point for the query results.
  Cursor end_at = 8;

  // The number of results to skip.
  //
  // Applies before limit, but after all other constraints. Must be >= 0 if
  // specified.
  int32 offset = 6;

  // The maximum number of results to return.
  //
  // Applies after all other constraints.
  // Must be >= 0 if specified.
  google.protobuf.Int32Value limit = 5;
}



// Firestore query for running an aggregation over a `StructuredQuery`.
message StructuredAggregationQuery {
  // The base query to aggregate over.
  oneof query_type {
    // Nested structure query.
    StructuredQuery structured_query = 1;
  }

  // The fields of the documents returned by `structured_query` to aggregate on.
  //
  // Every unique, existing combination of field values yield a single
  // aggregation result. When empty, the query is aggregated to a single result.
  //
  // Requires:
  //
  // * Duplicate fields are not allowed.
  // * Cannot be empty if `aggregations` is also empty.
  // * The `order_by` is optional, but when given, the `group_by` fields must
  //   be a strict prefix of the `order_by` fields.
  //
  // ```
  // -- Valid since the `order_by` is optional.
  // AGGREGATE a, COUNT(*) OVER ( SELECT * FROM k );
  //
  // -- Valid since the `order_by` is a prefix of the `group_by`.
  // AGGREGATE a, COUNT(*) OVER ( SELECT * FROM k ORDER BY a ASC, b ASC );
  //
  // -- Invalid since the `group_by` is not a prefix of the `order_by`.
  // AGGREGATE a, COUNT(*) OVER ( SELECT * FROM k ORDER BY b ASC, a ASC );
  // ```
  //
  repeated StructuredQuery.FieldReference group_by = 2
  [(google.api.field_behavior) = OPTIONAL];

  // Series of aggregations to apply on top of the `structured_query`.
  //
  // An aggregation query with `group_by` fields but without any `aggregations`
  // is a `DISTINCT` operator by itself.
  //
  // Requires:
  //
  // * Cannot be empty if `group_by` is also empty.
  // * Cannot aggregate over a field that is also in the `group_by`.
  //
  repeated Aggregation aggregations = 3
  [(google.api.field_behavior) = OPTIONAL];

  // An optional starting point for the resulting aggregation buckets.
  //
  // Requires:
  //
  // * Cannot be provided when `group_by` is empty.
  // * Cannot have more values than fields in the `group_by`.
  //
  Cursor start_group = 4 [(google.api.field_behavior) = OPTIONAL];

  // An optional end point for the resulting aggregation buckets.
  //
  // Requires:
  //
  // * Cannot be provided when `group_by` is empty.
  // * Cannot have more values than fields in the `group_by`.
  //
  Cursor end_group = 5 [(google.api.field_behavior) = OPTIONAL];

  // The number of initial aggregation results to skip.
  //
  // Applies before `max_groups` but after all other constraints.
  //
  // Requires:
  //
  // * Cannot be negative.
  // * Cannot be provided when `group_by` is empty.
  //
  int32 group_offset = 6 [(google.api.field_behavior) = OPTIONAL];

  // The optional number of aggregation results to return.
  //
  // Applies after all other constraints.
  //
  // Requires:
  //
  // * Cannot be negative.
  // * Cannot be provided when `group_by` is empty.
  //
  google.protobuf.Int32Value max_groups = 7
  [(google.api.field_behavior) = OPTIONAL];

  // Defines an aggregation of a single field.
  message Aggregation {
    // Count of documents that match the `group_by`.
    //
    // The `COUNT(*)` aggregation function operates on the entire document
    // so does not require a field reference.
    message Count {
      // Optional constraint on the maximum number of documents to count.
      //
      // This provides a way to set an upper bound on the number of documents
      // to inspect, limiting latency.
      //
      // ```
      // -- Identify values of `a` that appear over 100 times.
      // AGGREGATE a, COUNT(100) OVER ( SELECT * FROM k );
      // ```
      //
      // When there is no `group_by`, this is the same as a limit on the
      // underlying query.
      //
      // ```
      // -- The following two queries are logically equivalent.
      // AGGREGATE COUNT(100) OVER ( SELECT * FROM k );
      // AGGREGATE COUNT(*) OVER ( SELECT * FROM k LIMIT 100 );
      // ```
      //
      // Requires:
      //
      // * Must be greater than zero when present.
      //
      int32 max_value = 1 [(google.api.field_behavior) = OPTIONAL];
    }

    // Returns the first value of a given field for each group.
    //
    // The first value is determined by the underlying query's `order_by`
    // clause.
    //
    // ```
    // -- Each group of `a` will return the smallest value of `b`.
    // AGGREGATE a, FIRST(b) OVER ( SELECT * FROM k ORDER BY a ASC, b ASC );
    //
    // -- Changing the ordering causes each group to return the largest value.
    // AGGREGATE a, FIRST(b) OVER ( SELECT * FROM k ORDER BY a ASC, b DESC );
    // ```
    //
    // Requires:
    //
    // * The `field` cannot be in the `group_by`.
    // * The underlying `order_by` must the `group_by` followed by `field`.
    //
    message First {
      // The field to return.
      StructuredQuery.FieldReference field = 6
      [(google.api.field_behavior) = REQUIRED];
    }

    // Returns the last value of a given field for each group.
    //
    // This is the inverse of the `FIRST` aggregator, which should be used with
    // a reverse ordering to get the last value when required.
    //
    // Requires:
    //
    // * The `field` cannot be in the `group_by`.
    // * The underlying `order_by` must the `group_by` followed by `field`.
    // * Not allowed to be used with the `COUNT_UP_TO` or `FIRST` aggregators.
    //
    message Last {
      // The field to return.
      StructuredQuery.FieldReference field = 6
      [(google.api.field_behavior) = REQUIRED];
    }

    // The type of aggregation to perform, required.
    oneof operator {
      // Count aggregator.
      Count count = 1;

      // First aggregator.
      First first = 2;

      // Last aggregator.
      Last last = 3;
    }

    // The name of the field to store the result of the aggregation into.
    //
    // This is required and required to be unique across all other aggregation
    // functions as well as the `GROUP_BY` clause. The alias name must confirm
    // with existing field name limitations:
    // http://cloud/firestore/quotas#collections_documents_and_fields
    //
    // (--
    // While required the SDKs defaults to to using an alias that matches the
    // function name, i.e. `COUNT(*)` => `COUNT(*) AS count`. This makes the
    // simple case for customers easy, but they can always pick their own, for
    // example in cases where the same aggregation is used multiple times.
    // --)
    string alias = 7 [(google.api.field_behavior) = REQUIRED];
  }
}

// A position in a query result set.
message Cursor {
  // The values that represent a position, in the order they appear in
  // the order by clause of a query.
  //
  // Can contain fewer values than specified in the order by clause.
  repeated Value values = 1;

  // If the position is just before or just after the given values, relative
  // to the sort order defined by the query.
  bool before = 2;
}
